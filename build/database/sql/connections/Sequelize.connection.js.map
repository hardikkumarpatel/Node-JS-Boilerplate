{"version":3,"file":"Sequelize.connection.js","names":["_config","require","_helpers","_sequelize","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperty","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","SequelizeDBConnection","sync","_this","connection","alter","connect","_this2","authenticate","global","SQL","Log","info","SequelizeDBConnectionError","exports","default","Sequelize","Config","get","IConfig","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","logging","schema","port","DB_PORT","dialect"],"sources":["../../../../src/database/sql/connections/Sequelize.connection.js"],"sourcesContent":["import { Config, IConfig } from \"@/config\";\nimport { Log } from \"@/helpers\";\nimport { Sequelize } from \"sequelize\";\n\nexport default class SequelizeDBConnection {\n  static connection = new Sequelize(\n    Config.get(IConfig.DB_NAME),\n    Config.get(IConfig.DB_USER),\n    Config.get(IConfig.DB_PASS),\n    {\n      host: Config.get(IConfig.DB_HOST),\n      logging: false,\n      schema: \"public\",\n      port: Config.get(IConfig.DB_PORT),\n      dialect: \"postgres\"\n    }\n  );\n\n  static async sync() {\n    await this.connection.sync({ alter: true });\n  }\n\n  static async connect() {\n    /* eslint-disable no-useless-catch */\n    try {\n      await this.connection.authenticate();\n      await this.sync();\n      global.SQL = this.connection;\n      Log.info(\"SQL Database connected. ðŸŒ±\");\n    } catch (SequelizeDBConnectionError) {\n      throw SequelizeDBConnectionError;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}